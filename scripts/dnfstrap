#!/usr/bin/python3
# DNFStrap 0.2.0, now a part of libcappy.

import argparse
import os
from libcappy.installer import Bootstrap
import libcappy.logger as logger
import yaml
import curses
import signal

# help text
parser = argparse.ArgumentParser(description='Install an entire Ultramarine/Fedora system using libcappy.')
parser.add_argument('-d', '--debug', help='enable debug mode', action='store_true')
parser.add_argument('-v', '--version', help='print version', action='version', version='%(prog)s 0.2.0')
parser.add_argument('-e', '--enter-chroot', help='Only enter chroot, do not install anything', action='store_true')
parser.add_argument('-f', '--force', help='Force reinstallation of packages', action='store_true')
parser.add_argument('-u', '--unattended', help='Run unattended', action='store_true')
parser.add_argument('-c', '--config', help='config file', required=False)

banner = """ ______   ___   __    ______   ______   _________  ______    ________   ______
/_____/\\ /__/\\ /__/\\ /_____/\\ /_____/\\ /________/\\/_____/\\  /_______/\\ /_____/\\
\\:::_ \\ \\\\::\\_\\\\  \\ \\\\::::_\\/_\\::::_\\/_\\__.::.__\\/\\:::_ \\ \\ \\::: _  \\ \\\\:::_ \\ \\
 \\:\\ \\ \\ \\\\:. `-\\  \\ \\\\:\\/___/\\\\:\\/___/\\  \\::\\ \\   \\:(_) ) )_\\::(_)  \\ \\\\:(_) \\ \\
  \\:\\ \\ \\ \\\\:. _    \\ \\\\:::._\\/ \\_::._\\:\\  \\::\\ \\   \\: __ `\\ \\\\:: __  \\ \\\\: ___\\/
   \\:\\/.:| |\\. \\`-\\  \\ \\\\:\\ \\     /____\\:\\  \\::\\ \\   \\ \\ `\\ \\ \\\\:.\\ \\  \\ \\\\ \\ \\
    \\____/_/ \\__\\/ \\__\\/ \\_\\/     \\_____\\/   \\__\\/    \\_\\/ \\_\\/ \\__\\/\\__\\/ \\_\\/
"""
print(banner)

args = parser.parse_args()
if args.unattended:
    if not args.config:
        print('You must specify a config file when using unattended mode.')
        exit(1)
    config = args.config
    # check for config file
    if not os.path.isfile(config):
        print('Config file does not exist.')
        exit(1)
    # check config file validity (yaml)
    try:
        with open(config, 'r') as stream:
            yaml.safe_load(stream) # this will raise an exception if the file is not valid
    except yaml.YAMLError as exc:
        print('Config file is not valid YAML: ' + exc)
        exit(1)

def main():
    debug = args.debug

    # check for root
    if os.geteuid() != 0:
        print('This script must be run as root.')
        exit(1)
    # catch interrupts
    def signal_handler(signal, frame):
        if not args.unattended:
            curses.endwin()
        print('\nInterrupted by user.')
        exit(1)

    # catch interrupts
    signal.signal(signal.SIGINT, signal_handler)

    if args.unattended:
        config = args.config
        print('Unattended install enabled.')
        print(f'Using config file: {config}')
        inst = Bootstrap(config=config)
        inst.phase_1('build/')
        exit(0)

    stdscr = curses.initscr()
    curses.cbreak()
    if not debug:
        stdscr.clear()
        stdscr.refresh()
        curses.noecho()

    # print banner (curses)

    print('DNFStrap 0.2.0, now a part of libcappy.')

    # print multiline banner from massive string (curses)
    lineno = 0
    for line in banner.splitlines():
        stdscr.addstr(lineno, 0, line)
        lineno += 1
    # add a new line
    stdscr.addstr(lineno + 1, 0, 'DNFStrap 0.2.0, now a part of libcappy.')
    stdscr.addstr(lineno + 2, 0, 'Copyright (C) 2022 Cappy Ishihara and contributors under the MIT license.')
    stdscr.addstr(lineno + 3, 0, 'This is free software, and you are welcome to redistribute it under certain conditions.')
    stdscr.addstr(lineno + 4, 0, 'See LICENSE for details.')
    stdscr.addstr(lineno + 5, 0, '\n')
    stdscr.addstr(lineno + 6, 0, 'Press any key to continue.')
    stdscr.getkey()
    stdscr.clear()
    # add a box to the screen
    stdscr.box()
    # I literally do not know how to add a window in here, what the fuck
    stdscr.refresh()
    stdscr.getkey()
if __name__ == '__main__':
    main()
    curses.endwin()
